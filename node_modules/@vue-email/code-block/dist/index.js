"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  CodeBlock: () => CodeBlock
});
module.exports = __toCommonJS(src_exports);
var import_vue = require("vue");
var CodeBlock = (0, import_vue.defineComponent)({
  name: "CodeBlock",
  props: {
    code: {
      type: String,
      required: true
    },
    lang: {
      type: String,
      required: true
    },
    theme: {
      type: String,
      required: true
    },
    class: {
      type: String,
      default: ""
    },
    showLineNumbers: {
      type: Boolean,
      default: false
    },
    lineNumberColor: {
      type: String,
      default: "#636E7B"
    },
    lineHighlightingColor: {
      type: String,
      default: "rgba(101, 117, 133, .16)"
    },
    highlightedLines: {
      type: Array,
      default: () => []
    }
  },
  setup(_0) {
    return __async(this, arguments, function* ({ code, lang, theme, showLineNumbers, lineNumberColor, highlightedLines, lineHighlightingColor }) {
      const { getHighlighter } = yield import("shiki");
      if (!getHighlighter)
        throw new Error("Shiki is not available");
      const shiki = yield getHighlighter({
        langs: [lang],
        themes: [theme]
      });
      const themeColorBg = shiki.getTheme(theme).bg;
      const html = shiki.codeToHtml(code, {
        lang,
        theme,
        transformers: [
          {
            code(node) {
              node.properties.style = "display: table; width: 100%;";
            }
          },
          {
            line(node, line) {
              node.properties.style = "display: table-row; line-height: 1.5; height: 1.5em;";
              if (showLineNumbers) {
                node.children.unshift({
                  type: "element",
                  tagName: "span",
                  properties: {
                    className: ["line-number"],
                    style: `padding-left: 5px; padding-right: 15px; color: ${lineNumberColor}; user-select: none;`
                  },
                  children: [
                    {
                      type: "text",
                      value: `${line}`
                    }
                  ]
                });
              }
              if (highlightedLines.includes(line))
                node.properties.style += `background-color: ${lineHighlightingColor};`;
            }
          }
        ]
      });
      return () => (0, import_vue.h)("pre", {
        class: ["shiki", theme],
        style: {
          backgroundColor: themeColorBg,
          display: "block",
          whiteSpace: "pre",
          fontFamily: "monospace"
        },
        tabindex: 0
      }, [
        (0, import_vue.h)("span", {
          innerHTML: html
        })
      ]);
    });
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CodeBlock
});
