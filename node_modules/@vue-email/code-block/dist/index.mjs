var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
import { defineComponent, h } from "vue";
var CodeBlock = defineComponent({
  name: "CodeBlock",
  props: {
    code: {
      type: String,
      required: true
    },
    lang: {
      type: String,
      required: true
    },
    theme: {
      type: String,
      required: true
    },
    class: {
      type: String,
      default: ""
    },
    showLineNumbers: {
      type: Boolean,
      default: false
    },
    lineNumberColor: {
      type: String,
      default: "#636E7B"
    },
    lineHighlightingColor: {
      type: String,
      default: "rgba(101, 117, 133, .16)"
    },
    highlightedLines: {
      type: Array,
      default: () => []
    }
  },
  setup(_0) {
    return __async(this, arguments, function* ({ code, lang, theme, showLineNumbers, lineNumberColor, highlightedLines, lineHighlightingColor }) {
      const { getHighlighter } = yield import("shiki");
      if (!getHighlighter)
        throw new Error("Shiki is not available");
      const shiki = yield getHighlighter({
        langs: [lang],
        themes: [theme]
      });
      const themeColorBg = shiki.getTheme(theme).bg;
      const html = shiki.codeToHtml(code, {
        lang,
        theme,
        transformers: [
          {
            code(node) {
              node.properties.style = "display: table; width: 100%;";
            }
          },
          {
            line(node, line) {
              node.properties.style = "display: table-row; line-height: 1.5; height: 1.5em;";
              if (showLineNumbers) {
                node.children.unshift({
                  type: "element",
                  tagName: "span",
                  properties: {
                    className: ["line-number"],
                    style: `padding-left: 5px; padding-right: 15px; color: ${lineNumberColor}; user-select: none;`
                  },
                  children: [
                    {
                      type: "text",
                      value: `${line}`
                    }
                  ]
                });
              }
              if (highlightedLines.includes(line))
                node.properties.style += `background-color: ${lineHighlightingColor};`;
            }
          }
        ]
      });
      return () => h("pre", {
        class: ["shiki", theme],
        style: {
          backgroundColor: themeColorBg,
          display: "block",
          whiteSpace: "pre",
          fontFamily: "monospace"
        },
        tabindex: 0
      }, [
        h("span", {
          innerHTML: html
        })
      ]);
    });
  }
});
export {
  CodeBlock
};
