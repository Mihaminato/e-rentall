// src/index.ts
import { computed, defineComponent, h } from "vue";

// src/utils/spaces.ts
var withMargin = (props) => {
  const nonEmptyStyles = [
    withSpace(props.m, ["margin"]),
    withSpace(props.mx, ["marginLeft", "marginRight"]),
    withSpace(props.my, ["marginTop", "marginBottom"]),
    withSpace(props.mt, ["marginTop"]),
    withSpace(props.mr, ["marginRight"]),
    withSpace(props.mb, ["marginBottom"]),
    withSpace(props.ml, ["marginLeft"])
  ].filter((s) => Object.keys(s).length);
  const mergedStyles = nonEmptyStyles.reduce((acc, style) => {
    return { ...acc, ...style };
  }, {});
  return mergedStyles;
};
var withSpace = (value, properties) => {
  return properties.reduce((styles, property) => {
    if (!isNaN(parseFloat(value))) {
      return { ...styles, [property]: `${value}px` };
    }
    return styles;
  }, {});
};

// src/index.ts
var Heading = defineComponent({
  name: "Heading",
  props: {
    as: {
      type: String,
      default: "h1"
    },
    m: {
      type: [String, Number],
      default: void 0
    },
    mx: {
      type: [String, Number],
      default: void 0
    },
    my: {
      type: [String, Number],
      default: void 0
    },
    mt: {
      type: [String, Number],
      default: void 0
    },
    mr: {
      type: [String, Number],
      default: void 0
    },
    mb: {
      type: [String, Number],
      default: void 0
    },
    ml: {
      type: [String, Number],
      default: void 0
    },
    style: {
      type: [Object, String],
      default: void 0
    }
  },
  setup(props, { slots }) {
    const styleObject = computed(() => {
      if (typeof props.style === "string" || Array.isArray(props.style)) {
        return {};
      }
      return props.style;
    });
    return () => {
      var _a;
      return h(
        props.as,
        {
          "style": {
            ...withMargin({
              m: props.m,
              mx: props.mx,
              my: props.my,
              mt: props.mt,
              mr: props.mr,
              mb: props.mb,
              ml: props.ml
            }),
            ...styleObject.value
          }
        },
        (_a = slots.default) == null ? void 0 : _a.call(slots)
      );
    };
  }
});
export {
  Heading
};
